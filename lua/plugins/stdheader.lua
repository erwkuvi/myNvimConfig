--local asciiart = {
--    "        :::      ::::::::",
--    "      :+:      :+:    :+:",
--    "    +:+ +:+         +:+  ",
--    "  +#+  +:+       +#+     ",
--    "+#+#+#+#+#+   +#+        ",
--    "     #+#    #+#          ",
--    "    ###   ########.fr    "
--}
--
--local start_str = '/*'
--local end_str = '*/'
--local fill_char = '*'
--local length = 80
--local margin = 5
--
--local types = {
--    ['%.c$|%.h$|%.cc$|%.hh$|%.cpp$|%.hpp$|%.php'] = {'/*', '*/', '*'},
--    ['%.htm$|%.html$|%.xml$'] = {'<!--', '-->', '*'},
--    ['%.js$'] = {'//', '//', '*'},
--    ['%.tex$'] = {'%', '%', '*'},
--    ['%.ml$|%.mli$|%.mll$|%.mly$'] = {'(*', '*)', '*'},
--    ['%.vim$|%.vimrc$'] = {'"', '"', '*'},
--    ['%.el$|%.emacs$'] = {';', ';', '*'},
--    ['%.f90$|%.f95$|%.f03$|%.f$|%.for$'] = {'!', '!', '/'}
--}
--
--local function filetype()
--    local filename = vim.fn.expand("%:t")
--    start_str = '#'
--    end_str = '#'
--    fill_char = '*'
--
--    for pattern, values in pairs(types) do
--        if filename:match(pattern) then
--            start_str = values[1]
--            end_str = values[2]
--            fill_char = values[3]
--            break
--        end
--    end
--end
--
--local function ascii(n)
--    return asciiart[n - 2]
--end
--
--local function textline(left, right)
--    left = left:sub(1, length - margin * 2 - #right)
--    return start_str .. string.rep(' ', margin - #start_str) .. left ..
--           string.rep(' ', length - margin * 2 - #left - #right) .. right ..
--           string.rep(' ', margin - #end_str) .. end_str
--end
--
--local function line(n)
--    if n == 1 or n == 11 then
--        return start_str .. ' ' .. string.rep(fill_char, length - #start_str - #end_str - 2) .. ' ' .. end_str
--    elseif n == 2 or n == 10 then
--        return textline('', '')
--    elseif n == 3 or n == 5 or n == 7 then
--        return textline('', ascii(n))
--    elseif n == 4 then
--        return textline(vim.fn.expand("%:t"), ascii(n))
--    elseif n == 6 then
--        return textline("By: " .. vim.fn.system('whoami'):gsub('\n', '') .. " <" .. vim.fn.system('echo $MAIL'):gsub('\n', '') .. ">", ascii(n))
--    elseif n == 8 then
--        return textline("Created: " .. os.date("%Y/%m/%d %H:%M:%S") .. " by " .. vim.fn.system('whoami'):gsub('\n', ''), ascii(n))
--    elseif n == 9 then
--        return textline("Updated: " .. os.date("%Y/%m/%d %H:%M:%S") .. " by " .. vim.fn.system('whoami'):gsub('\n', ''), ascii(n))
--    end
--end
--
--local function user()
--    local user42 = vim.g.user42
--    if user42 then
--        return user42
--    end
--    local username = vim.fn.system('whoami'):gsub('\n', '')
--    if #username == 0 then
--        username = "marvin"
--    end
--    return username
--end
--
--local function mail()
--    local mail42 = vim.g.mail42
--    if mail42 then
--        return mail42
--    end
--    local mail = vim.fn.system('echo $MAIL'):gsub('\n', '')
--    if #mail == 0 then
--        mail = "marvin@42.fr"
--    end
--    return mail
--end
--
--local function filename()
--    local filename = vim.fn.expand("%:t")
--    if #filename == 0 then
--        filename = "< new >"
--    end
--    return filename
--end
--
--local function date()
--    return os.date("%Y/%m/%d %H:%M:%S")
--end
--
--local function insert()
--    local line_num = 11
--    vim.api.nvim_buf_set_lines(0, 0, 0, false, {""})
--
--    while line_num > 0 do
--        vim.api.nvim_buf_set_lines(0, 0, 0, false, {line(line_num)})
--        line_num = line_num - 1
--    end
--end
--
--local function update()
--    filetype()
--    local line9 = vim.api.nvim_buf_get_lines(0, 8, 9, false)[1]
--    if line9:match(start_str .. string.rep(' ', margin - #start_str) .. "Updated: ") then
--        if vim.fn.getbufvar(0, "&mod") == 1 then
--            vim.api.nvim_buf_set_lines(0, 8, 9, false, {line(9)})
--        end
--        vim.api.nvim_buf_set_lines(0, 3, 4, false, {line(4)})
--        return false
--    end
--    return true
--end
--
--local function stdheader()
--    if update() then
--        insert()
--    end
--end
--
--vim.cmd("command! Stdheader call v:lua.stdheader()")
--vim.api.nvim_set_keymap("n", "<F1>", ":Stdheader<CR>", { noremap = true, silent = true })
--vim.cmd("autocmd BufWritePre * call v:lua.update()")
--
